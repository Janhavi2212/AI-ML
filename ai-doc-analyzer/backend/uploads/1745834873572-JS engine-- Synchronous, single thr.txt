JS engine--> Synchronous, single threaded

As js is single threaded, it takes help from the runtime environment  for asynchronous, -- V8 engine, Web API, Event Loop, queue(Microtask/priority, Timer/Macro/Callback)

Node.js- opensource JS runtime environment, runs code without browser, V8 engine, event loop,

 JS executes codes in 2 phases-
1. Creation Phase/ Memory allocation phase
2. Execution Phase

In the creation phase, it will start moving all declarations to the top of the scope, this is called Hoisting in JS.

declaration-var a, function foo(){};
identifier-a, foo
identifier moves up and is put there as key,
For let and const, it will not assign any placeholder value
foo(key): it will assign the entire function as the value.

let sayHi=function (){
console.log('sayHi')}
This is variable declaration, 
sayHi:
(without any value since it is let variable )

creation phase is completed after all the hoisting is done, now the execution phase will take place,

GEC
a:10
b:15
foo:function(){}
sayHi:function(){}

on top of gec- sayHi EC
If we do not return anything, it will return underfined

Temporal dead-zone- the area where you cannot access the variable

---------------------------------
function declaration - 
	function foo(){}

function expression-
	var sayHi = function () {  }
	let sayHello = () =>{  }

fundamental difference is the hoisting. 

sayHi() /// it will say sayHi is not a function 
var sayHi=function () {  };

/// statement vs expression
expression --> that returns a value, something that evaluates into some value

if (5>3){
console.log("gh");}  this entire thing is an statement

// iife == Imediately invoked function expression

{function(ans){
let a=10;
console.log(ans);}}(5)
when function is enclosed in parenthesis

// Global scope pollution --> we might end up making variables which can overwrite already present functions, and iife solves that problem


/// difference between parameter and argument
Parameters - 
Arguments - 

// callback is a function that is being used as an argument to another function.

///

mobile app

plugins {
  id 'com.android.application'

  // Add the Google services Gradle plugin
  id 'com.google.gms.google-services'

  ...
}

dependencies {
  // Import the Firebase BoM
  implementation platform('com.google.firebase:firebase-bom:33.12.0')


  // TODO: Add the dependencies for Firebase products you want to use
  // When using the BoM, don't specify versions in Firebase dependencies
  // https://firebase.google.com/docs/android/setup#available-libraries
}


